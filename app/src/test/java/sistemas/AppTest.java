/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sistemas;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test
    void testSaludarUsuario() {
        assertEquals("Hola Juan", App.saludarUsuario("Juan"));
        assertEquals("Hola Maria", App.saludarUsuario("Maria"));
    }

    @Test
    void testConvertirVelocidad() {
        assertEquals("1200|4320000", App.convertirVelocidad(1.2));
        assertEquals("0|0", App.convertirVelocidad(0));
    }

    @Test
    void testConvertirCcALitros() {
        assertEquals(1, App.convertirCcALitros(1500));
        assertEquals(0, App.convertirCcALitros(0));
    }

    @Test
    void testConvertirDolaresAPesos() {
        assertEquals(380000, App.convertirDolaresAPesos(100, 3800));
        assertEquals(0, App.convertirDolaresAPesos(0, 3800));
    }

    @Test
    void testConvertirCelsiusAFahrenheit() {
        assertEquals(77, App.convertirCelsiusAFahrenheit(25));
        assertEquals(32, App.convertirCelsiusAFahrenheit(0));
    }

    @Test
    void testConvertirATotalSegundos() {
        assertEquals(93784, App.convertirATotalSegundos(1, 2, 3, 4));
        assertEquals(0, App.convertirATotalSegundos(0, 0, 0, 0));
    }

    @Test
    void testCalcularPesoNeto() {
        assertEquals("10|0", App.calcularPesoNeto(10000));
        assertEquals("0|0", App.calcularPesoNeto(0));
    }

    @Test
    void testCalcularTiempoViaje() {
        assertEquals(20, App.calcularTiempoViaje(100, 80, 16));
        assertEquals(-1, App.calcularTiempoViaje(100, 0, 16)); // Test para manejo de excepción
    }

    @Test
    void testCalcularCombustible() {
        assertEquals(9, App.calcularCombustible(100, 200, 300, 400));
        assertEquals(6, App.calcularCombustible(0, 0, 0, 0)); // Solo consumo de despegue y aterrizaje
    }

    @Test
    void testCalcularPesoLunar() {
        assertEquals(81, App.calcularPesoLunar(70));
        assertEquals(0, App.calcularPesoLunar(0));
    }

    @Test
    void testCalcularSaldoTaquilla() {
        assertEquals(120000, App.calcularSaldoTaquilla(100000, 50000, 30000));
        assertEquals(0, App.calcularSaldoTaquilla(100000, 50000, 150000)); // Test para manejo de excepción
    }

    @Test
    void testCalcularCuentaRestaurante() {
        assertEquals("2000|1600|23600", App.calcularCuentaRestaurante(20000));
        assertEquals("0|0|0", App.calcularCuentaRestaurante(0));
    }

    @Test
    void testCalcularPuntosFutbol() {
        assertEquals(33, App.calcularPuntosFutbol(10, 5, 3));
        assertEquals(0, App.calcularPuntosFutbol(0, 0, 0));
    }

    @Test
    void testCalcularNotaFinal() {
        assertEquals(4, App.calcularNotaFinal(4, 4, 4, 4, 4, 0.2, 0.2, 0.2, 0.2, 0.2));
        assertEquals(-1, App.calcularNotaFinal(4, 4, 4, 4, 4, 0, 0, 0, 0, 0)); // Test para manejo de excepción
    }

    @Test
    void testCalcularNotaNecesaria() {
        assertEquals(-1, App.calcularNotaNecesaria(0.2, 0.2, 0.2, 0.2, 0.2, 4, 4, 4, 4));
        assertEquals(-1, App.calcularNotaNecesaria(0, 0, 0, 0, 0, 4, 4, 4, 4)); // Test para manejo de excepción
    }

    @Test
    void testCalcularSalario() {
        assertEquals(1165000, App.calcularSalario(40, 10, 5, 20000));
        assertEquals(-1, App.calcularSalario(0, 0, 0, 0)); // Test para manejo de excepción
    }

    @Test
    void testCalcularAreaTriangulo() {
        assertEquals(6, App.calcularAreaTriangulo(3, 4));
        assertEquals(0, App.calcularAreaTriangulo(0, 4));
    }

    @Test
    void testCalcularPerimetroCuadrado() {
        assertEquals(20, App.calcularPerimetroCuadrado(5));
        assertEquals(0, App.calcularPerimetroCuadrado(0));
    }

    @Test
    void testCalcularVolumenCilindro() {
        assertEquals((int) (Math.PI * 3 * 3 * 5), App.calcularVolumenCilindro(3, 5));
        assertEquals(0, App.calcularVolumenCilindro(0, 5));
    }

    @Test
    void testCalcularAreaCirculo() {
        assertEquals((int) (Math.PI * 7 * 7), App.calcularAreaCirculo(7));
        assertEquals(0, App.calcularAreaCirculo(0));
    }
}
